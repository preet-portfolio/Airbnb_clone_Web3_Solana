"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["node_modules_strike-protocols_solana-wallet-adapter_lib_esm_index_mjs"],{

/***/ "./node_modules/@strike-protocols/solana-wallet-adapter/lib/esm/index.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/@strike-protocols/solana-wallet-adapter/lib/esm/index.mjs ***!
  \********************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _strikewallet_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./strikewallet.mjs */ \"./node_modules/@strike-protocols/solana-wallet-adapter/lib/esm/strikewallet.mjs\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _strikewallet_mjs__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _strikewallet_mjs__WEBPACK_IMPORTED_MODULE_0__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHN0cmlrZS1wcm90b2NvbHMvc29sYW5hLXdhbGxldC1hZGFwdGVyL2xpYi9lc20vaW5kZXgubWpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQW1DO0FBQ25DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ac3RyaWtlLXByb3RvY29scy9zb2xhbmEtd2FsbGV0LWFkYXB0ZXIvbGliL2VzbS9pbmRleC5tanM/ZWU5ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL3N0cmlrZXdhbGxldC5tanMnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@strike-protocols/solana-wallet-adapter/lib/esm/index.mjs\n");

/***/ }),

/***/ "./node_modules/@strike-protocols/solana-wallet-adapter/lib/esm/strikewallet.mjs":
/*!***************************************************************************************!*\
  !*** ./node_modules/@strike-protocols/solana-wallet-adapter/lib/esm/strikewallet.mjs ***!
  \***************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"StrikeWallet\": function() { return /* binding */ StrikeWallet; }\n/* harmony export */ });\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @solana/web3.js */ \"./node_modules/@solana/web3.js/lib/index.browser.esm.js\");\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bs58 */ \"./node_modules/bs58/index.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uuid */ \"./node_modules/uuid/dist/esm-browser/index.js\");\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! eventemitter3 */ \"./node_modules/eventemitter3/index.js\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\n\n\n\nconst DEFAULT_SIGNATURE_BUFFER = Buffer.alloc(_solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.SIGNATURE_LENGTH_IN_BYTES).fill(0);\nclass StrikeWallet extends eventemitter3__WEBPACK_IMPORTED_MODULE_2__.EventEmitter {\n    constructor() {\n        super();\n        this.url = 'https://wallet.strikeprotocols.com';\n        this.cleanUp = () => {\n            [...this._timers].forEach(t => this.clearTimer(t));\n            const wallet = this._wallet;\n            if (wallet) {\n                wallet.close();\n            }\n            this._wallet = null;\n            this.emit('disconnected');\n        };\n        this.clearTimer = (timer) => {\n            this._timers = this._timers.filter(t => t != timer);\n            window.clearInterval(timer);\n        };\n        this.instructionsToSerializableInstructions = (instructions) => instructions.map(i => {\n            return {\n                'programId': i.programId.toBase58(),\n                'accountMetas': i.keys.map(k => {\n                    return {\n                        address: k.pubkey.toBase58(),\n                        signer: k.isSigner,\n                        writable: k.isWritable,\n                    };\n                }),\n                'data': window.btoa(String.fromCharCode(...i.data)),\n            };\n        });\n        this.handleWalletMessage = (data) => {\n            var _a, _b, _c;\n            if (data.type == \"connected\") {\n                this._connecting = false;\n                if (!data.error) {\n                    this.isLoggedIn = true;\n                    if ((_a = data.connected) === null || _a === void 0 ? void 0 : _a.publicKey) {\n                        this._publicKey = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.PublicKey(data.connected.publicKey);\n                    }\n                }\n            }\n            else if ([\"sendTransaction\", \"sendFinalTransaction\"].includes(data.type)) {\n                const transactionIdentifier = (_b = data.sendTransaction) === null || _b === void 0 ? void 0 : _b.identifier;\n                if (transactionIdentifier && transactionIdentifier in this._pendingTransactions) {\n                    if (data.error) {\n                        this._pendingTransactionErrors[transactionIdentifier] = { message: data.error };\n                    }\n                    else {\n                        this._pendingTransactions[transactionIdentifier] = data.sendTransaction || null;\n                    }\n                }\n            }\n            else if (data.type == \"signTransaction\") {\n                const transactionIdentifier = (_c = data.signTransaction) === null || _c === void 0 ? void 0 : _c.identifier;\n                if (transactionIdentifier && transactionIdentifier in this._pendingTransactions) {\n                    if (data.error) {\n                        this._pendingTransactionErrors[transactionIdentifier] = { message: data.error };\n                    }\n                    else {\n                        this._pendingTransactions[transactionIdentifier] = data.signTransaction || null;\n                    }\n                }\n            }\n        };\n        this.isLoggedIn = false;\n        this._pendingTransactions = {};\n        this._pendingTransactionErrors = {};\n        this._timers = [];\n        this._wallet = null;\n        this._connecting = false;\n        this._publicKey = null;\n        window.addEventListener(\"message\", (e) => {\n            this.handleWalletMessage(e.data);\n        });\n    }\n    async connect(url) {\n        try {\n            this.url = url || this.url;\n            const origin = encodeURIComponent(window.location.origin);\n            const connectUrl = `${this.url}/connect?origin=${origin}`;\n            this._connecting = true;\n            this._wallet = window.open(connectUrl, `strike-wallet-${origin}`, \"height=900,width=800,menubar=no,status=no,toolbar=no\");\n            if (!this._wallet) {\n                this._connecting = false;\n                throw new Error(\"Unable to connect to wallet\");\n            }\n            this._timers.push(window.setInterval(() => {\n                if (this._wallet.closed) {\n                    this.cleanUp();\n                }\n                else if (this._wallet) {\n                    this._wallet.postMessage({ type: 'heartbeat' }, this.url);\n                }\n            }, 100));\n            return new Promise((resolve, reject) => {\n                const timer = window.setInterval(() => {\n                    if (this.isLoggedIn && this._publicKey) {\n                        this.clearTimer(timer);\n                        resolve(this._publicKey);\n                    }\n                    else if (!this.isLoggedIn && !this._connecting) {\n                        this.clearTimer(timer);\n                        reject(new Error(\"Unable to connect to Strike\"));\n                    }\n                }, 100);\n                this._timers.push(timer);\n            });\n        }\n        catch (error) {\n            throw error;\n        }\n    }\n    async signTransaction(transaction) {\n        this.verifyCanSignRequests([transaction]);\n        try {\n            return this.signOneTransaction(transaction);\n        }\n        catch (error) {\n            throw error;\n        }\n    }\n    async signAllTransactions(transactions) {\n        this.verifyCanSignRequests(transactions);\n        try {\n            return this.signMultipleTransactions(transactions);\n        }\n        catch (error) {\n            throw error;\n        }\n    }\n    async sendTransaction(transaction, connection, options) {\n        try {\n            const wallet = this._wallet;\n            if (!wallet)\n                throw new Error(\"Not Connected\");\n            const transactionIdentifier = (0,uuid__WEBPACK_IMPORTED_MODULE_3__.v4)();\n            this._pendingTransactions[transactionIdentifier] = null;\n            const signers = options ? options.signers : undefined;\n            if (signers && signers.length > 0) {\n                return new Promise((resolve, reject) => {\n                    this.signOneTransaction(transaction, transactionIdentifier).then(walletTransaction => {\n                        this._pendingTransactions[transactionIdentifier] = null;\n                        (signers === null || signers === void 0 ? void 0 : signers.length) && walletTransaction.partialSign(...signers);\n                        wallet.postMessage({\n                            type: \"sendFinalTransaction\", sendFinalTransaction: {\n                                transactionIdentifier,\n                                signaturePubkeyPairs: walletTransaction.signatures.filter(sp => sp.signature != null).map(sp => {\n                                    return {\n                                        'pubkey': sp.publicKey.toBase58(),\n                                        'signature': sp.signature.toString('base64')\n                                    };\n                                })\n                            }\n                        }, this.url);\n                        const timer = window.setInterval(() => {\n                            const pendingTransaction = this._pendingTransactions[transactionIdentifier];\n                            const pendingTransactionError = this._pendingTransactionErrors[transactionIdentifier];\n                            if (pendingTransaction != null || pendingTransactionError != null) {\n                                this.clearTimer(timer);\n                                pendingTransaction && resolve(pendingTransaction.signature);\n                                pendingTransactionError && reject(pendingTransactionError);\n                            }\n                        }, 100);\n                        this._timers.push(timer);\n                    }).catch((error) => {\n                        reject(error);\n                        throw error;\n                    });\n                });\n            }\n            else {\n                const instructions = this.instructionsToSerializableInstructions(transaction.instructions);\n                return new Promise((resolve, reject) => {\n                    wallet.postMessage({\n                        type: \"sendTransaction\",\n                        sendTransaction: { instructions, transactionIdentifier }\n                    }, this.url);\n                    const timer = window.setInterval(() => {\n                        const pendingTransaction = this._pendingTransactions[transactionIdentifier];\n                        const pendingTransactionError = this._pendingTransactionErrors[transactionIdentifier];\n                        if (pendingTransaction != null || pendingTransactionError != null) {\n                            this.clearTimer(timer);\n                            pendingTransaction && resolve(pendingTransaction.signature);\n                            pendingTransactionError && reject(pendingTransactionError);\n                        }\n                    }, 100);\n                    this._timers.push(timer);\n                });\n            }\n        }\n        catch (error) {\n            throw error;\n        }\n    }\n    buildTransaction(pendingTransaction) {\n        let message = _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Message.from(Buffer.from(Uint8Array.from(window.atob(pendingTransaction.message), c => c.charCodeAt(0))));\n        return _solana_web3_js__WEBPACK_IMPORTED_MODULE_0__.Transaction.populate(message, Array.from({ length: message.header.numRequiredSignatures }, (_v, i) => {\n            let sigPubkeyPair = pendingTransaction.signatures.find(s => s.pubkey == message.accountKeys[i].toBase58());\n            return bs58__WEBPACK_IMPORTED_MODULE_1__.encode(sigPubkeyPair\n                ? Buffer.from(Uint8Array.from(window.atob(sigPubkeyPair.signature), c => c.charCodeAt(0)))\n                : DEFAULT_SIGNATURE_BUFFER);\n        }));\n    }\n    verifyCanSignRequests(transactions) {\n        transactions.forEach(transaction => {\n            if (transaction.signatures.some(s => s.signature != null)) {\n                throw new Error(\"Strike does not support this signing mode\");\n            }\n        });\n    }\n    signOneTransaction(transaction, transactionIdentifier = (0,uuid__WEBPACK_IMPORTED_MODULE_3__.v4)()) {\n        const wallet = this._wallet;\n        if (!wallet)\n            throw new Error(\"Not Connected\");\n        const instructions = this.instructionsToSerializableInstructions(transaction.instructions);\n        this._pendingTransactions[transactionIdentifier] = null;\n        return new Promise((resolve, reject) => {\n            wallet.postMessage({ type: \"signTransaction\", signTransaction: { instructions, transactionIdentifier } }, this.url);\n            const timer = window.setInterval(() => {\n                const pendingTransaction = this._pendingTransactions[transactionIdentifier];\n                const pendingTransactionError = this._pendingTransactionErrors[transactionIdentifier];\n                if (pendingTransaction != null || pendingTransactionError != null) {\n                    this.clearTimer(timer);\n                    pendingTransaction && resolve(this.buildTransaction(pendingTransaction));\n                    pendingTransactionError && reject(pendingTransactionError);\n                }\n            }, 100);\n            this._timers.push(timer);\n        });\n    }\n    signMultipleTransactions(transactions) {\n        const wallet = this._wallet;\n        if (!wallet)\n            throw new Error(\"Not Connected\");\n        const serializedTransactions = transactions.map((t) => {\n            return {\n                instructions: this.instructionsToSerializableInstructions(t.instructions),\n                transactionIdentifier: (0,uuid__WEBPACK_IMPORTED_MODULE_3__.v4)()\n            };\n        });\n        const transactionIdentifiers = serializedTransactions.map((t) => t.transactionIdentifier);\n        transactionIdentifiers.forEach((transactionIdentifier) => this._pendingTransactions[transactionIdentifier] = null);\n        return new Promise((resolve, reject) => {\n            wallet.postMessage({ type: \"signAllTransactions\", signAllTransactions: { transactions: serializedTransactions } }, this.url);\n            const timer = window.setInterval(() => {\n                const pendingTransactions = transactionIdentifiers.map((txId) => this._pendingTransactions[txId]);\n                const pendingTransactionErrors = transactionIdentifiers.map((txId) => this._pendingTransactionErrors[txId]);\n                if (pendingTransactions.every((t) => t != null)) {\n                    this.clearTimer(timer);\n                    resolve(pendingTransactions.map((pt) => this.buildTransaction(pt)));\n                }\n                else if (pendingTransactionErrors.some((e) => e != null)) {\n                    this.clearTimer(timer);\n                    reject(pendingTransactionErrors.find((e) => e != null));\n                }\n            }, 100);\n            this._timers.push(timer);\n        });\n    }\n}\n//# sourceMappingURL=strikewallet.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@strike-protocols/solana-wallet-adapter/lib/esm/strikewallet.mjs\n");

/***/ })

}]);